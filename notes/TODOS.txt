(DONE) DNTX-005: Make the delete Transaction seemless
 > as of now, the user needs to close the modal, then go back to the Transaction list to see the effect
 
DNTX-006: Use OAuth for Gdrive
 > as of now, if user uses the gdrive as cloud storage for files, they need to create a link that is accessible to everyone and add it in the log
 > this creates security issue with regards to gdrive files
 > to solve this, we will need to use OAuth to authorize DNTX to access Gdrive of the user
 
(DONE) DNTX-007: Forgot password using email
 > user must be able to reset their password using thewir email
 > dntx will send an email with link
 
(DONE) DNTX-008: Add "Re-enter password" field in Register form
 > this is to ensure that user entered the correct password 
 
(DONE) DNTX-009: Add filter option in the Transaction history page
 > filters include:
	- date range for dateFinished
	- type of transaction

(DONE) DNTX-010: Add date information in the excel filename of the 

(DONE) DNTX-011: Add option for entering transaction date in the create Transaction feature

(DONE) DNTX-012: Use ZonedDateTime instead of LocalDateTime for time related information of Transactions
 > places where we need to take account of timezones
	- input for date in creating/editing Transaction
		-> backend and frontend

(DONE) DNTX-013: Inject Okteto Secret for sensitive data. Modify k8s yaml for better decoupling of components

(DONE) DNTX-014: Transaction field member for indicating reverse transaction type
 > used for changing current transaction type in reverse
	- ex: CC2GOLD to GOLD2CC
	- this means that instead of the User trading their CC to Gold, they trade their Gold for CC
	
(DONE) DNTX-015: TransactionItem class
 > as of now, each Transaction can only represent a single item in the said Transaction
	- for Transaction with multiple items (i.e. ITEM2GOLD, where there are multiple items in a single Transaction), we will need to create multiple Transaction objects
 > to remedy this, for each Transaction, there will be multiple transaction items
 > TransactionItem class will have the same attribute fields as the current Transaction class right now
 > Then the Transaction class will have a field of TransactionItems[], to reference multiple TransactionItem
 > this change will affect the following places
	a. Backend
		1. "model" classes
			- Transaction
			- TransactionItem
		2. services
			- TransactionService
				= excelToList
				= listToExcel
	b. Frontend
		1. Transaction details
		2. Create/Edit/Delete Transaction page
		3. Transaction Card, specify the number of Transaction items
		
(DONE) DNTX-016: Modify the page where TransactionItems is rendered to not break on any device width
 > as of now, in some device screen width, the arrows used to navigate Transaction items breaks
 
(DONE) DNTX-017: Add favicon in the page
 > no favicon set for DNTX
	
(DONE) DNTX-018: Fix issue related to Transaction level info (username, date finished, fileAttachments) being reset when adding or removing transaction item

(DONE) DNTX-019: Add option to create new Transaction after just creating a new one
 > as of now, when the user just finished creating a Transaction, the only thing that will change in the Create Transaction page is the prompt as to whether the creation is a success or not
 > because of this, we want to have the user an option to clear all the fields, and reset transaction items after they successfully finished creating a transaction
 
(DONE) DNTX-020: Refractor the FileAttachment form inputs to use CarouselWithAddRemove component

(DONE) DNTX-021: Put the "/transactions/:transactionId" route path OUTSIDE the loggedIn route guard
 > The transactions details page is supposed to be exposed in the public in case the users wants to provide the transaction details to the other party
 > Currently, the Transaction details page is inside the route guard where the user must be logged in
 > We need to remove the said route outside of it
 
 
(DONE) DNTX-022: Allow decimals to be added as value in some fields of TransactionItems
 > as of now, some fields (ex: ITEM2GOLD item price in gold) only allows whole number
 
(DONE) DNTX-023: Change the default value for number fields in TransactionItem to 0

(DONE) DNTX-024: Reset the status of create/edit transaction in CreateTransaction and EditTransaction pages after resetting the form

(DONE) DNTX-025: CreateTransaction page blanks out whenever someone adds a TransactionItem
 > happens only after resetting the form
 > error:
	TypeError: Cannot read properties of undefined (reading 'itemName')
 > cant replicate in local dev env
 > in order to fix this, when resetting, we will not reset the TransactionItem to empty array, instead we will reinitialize it to a array with single item
 > error is related to incorrect current index used to specify the current transaction item to display
 
(DONE) DNTX-026: Change the TransactionItem carousel wherein whenever we add a TransactionItem, it will go to the newly created one. Also whenever we remove an item, it will go to the previous one

DNTX-027: Fix bug in EditTransaction page wherein whenever the TransactionItems data is not being populated properly
 > cant replicate in local dev env, will investigate further

(DONE) DNTX-028: Scroll the page back to the top whenever we are saving Transactions in CreateTransaction and EditTransaction page
 > allows user to see the status of the request, without the need to scroll up
 
(DONE) DNTX-029: Add timer or cooldown before the user can do a create or edit action in the Transaction again
 > we can disable the 'Save' or 'Update' button for a moment to avoid duplicate transactions
 > used to prevent multiple update or create transactions
 
DNTX-030: Remove unnecessary logs in FE
 > TransactionItemsCarousel.tsx
 
DNTX-031: Create Jenkins pipelines to automate the build and deployment to Okteto
 > pipelines to create includes:
	1. build FE (DONE)
		- build Docker image, then push to dockerhub
	2. build BE
		- build Docker image, then push to dockerhub
	3. deploy
	4. test (no test cases written yet)
 > for building Docker image, the image name should be in format
	- shuntjg/${module.image.name}:${module.image.tag}_${maven.build.timestamp}
	- module.image.name will be name of image, examples are below
		= dntx-backend, dntx-frontend
	- module.image.tag will be the branch that we used to create these components
		= ex: 0.0.2.9, 0.0.2.10
	- maven.build.timestamp will be any random character to append, in case of multiple builds in the same branch. in this case it will be a timestamp
 > for BE, use the command
	- mvn ./mvnw spring-boot:build-image -DskipTests "-Dmodule.image.name=dntx-backend-1" "-Dmodule.image.tag=0.0.2.10"
 > for FE, use the command	
	- docker build -f Dockerfile.prod -t shuntjg/dntx-frontend:0.0.2.10-PROD .  


DNTX-032: Deploy the DNTX application in Cloud using AWS
 > deployment will be done in an EC2 instance
	- this EC2 instance will run a Docker engine inside
 > all the services that we have right now (BE, FE, DB) will be deployed as a Docker container in kubernetes cluster with minikube
 > installation of minikube:
	= https://crishantha.medium.com/running-minikube-on-aws-ec2-e845337a956
 
DNTX-033: Changed mountPath of mongodb database
 > from /data/dntx to /etc/mongo